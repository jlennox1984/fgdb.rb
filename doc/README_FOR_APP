= _F_ree_G_eek _D_ata_B_ase in _R_u_B_y

== Install on Ubuntu 12.04

Currently the ruby versions on Ubuntu precise are a little out of
date.  The preferred method for running fgdb.rb is via RVM.  The
following process will setup a basic RVM environment which works for
development purposes.  It assumes no existing RVM on the system.

Please read all the instructions and modify appropriately for your
environment.

=== Source code

To get a source code checkout, install git and clone the repository:
  precise $ sudo apt-get install git
  precise $ git clone -b migrate-1.9 https://github.com/tedrek/fgdb.rb.git \
            /path/to/desired/checkout/location
  precise $ cd /path/to/desired/checkout/location

You should now have the latest dev code checked out.  You may wish to
use a stable release instead.

=== Software dependencies

Install the dependencies required by FGDB.rb:
  precise $ sudo apt-get update

  # External utilities, including a database server
  precise $ sudo apt-get install postgresql-9.1 xmlstarlet curl socat

  # Install dependencies for ruby1.9.3
  precise $ sudo apt-get install gawk libreadline6-dev zlib1g-dev libssl-dev \
                 libyaml-dev libsqlite3-dev sqlite3 autoconf libgdbm-dev \
                 libncurses5-dev automake libtool bison pkg-config libffi-dev

  # Install rvm
  precise $ curl -L https://get.rvm.io | /bin/bash -s stable

  # Install ruby 1.9.3
  precise $ rvm install 1.9.3

  # Install bundler
  precise $ gem install bundler

  # Install dependencies for gems
  precise $ sudo apt-get install libpq-dev libmagickcore-dev libmagickwand-dev

  # Install gems
  precise $ bundle install

=== Configure your database

This creates a user with full priveleges on the database server, it is
possible to run with lesser priveleges but that is not currently
documented.

Create a user for FGDB on your postgres DB:
  precise $ sudo -u postgres createuser -aP fgdb

Point the application at your database by copying
config/database.yml-example to config/database.yml and editing it.

=== Initialize the database

For production database replace 'development' with 'production'
  precise $ export RAILS_ENV=development
  precise $ rake db:create
  precise $ rake db:schema:load
  precise $ rake db:metadata:load
  precise $ ./script/make_admin
  precise $ rake db:migrate

=== Setup complete

You can now run ./scripts/server and should have a working setup.  For
production, passenger is the recommended server.

== Install on Debian Squeeze

NOTE: Information specific to the installation at FG PDX is in doc/README.maintenance

we made this on debian squeeze systems. alteration may be needed on other distros.

 To get a source repository checkout:
 $> sudo apt-get install -y git-core
 $> git clone git://git.freegeek.org/git/fgdb.rb
 $> cd fgdb.rb

 If you would like to use the latest stable release (for production
 purposes), then look for the most recently released version number in
 the ChangeLog file and use it in the following:
 $> git checkout -b release_1.0.XX origin/release_1.0.XX

 Install stuff:
 $> apt-get update

 Install dependencies used by the system (make sure Rails 2.3 is installed):
 $> sudo apt-get install -y postgresql-8.4 rails ruby1.8 libnokogiri-ruby libbarby-ruby librmagick-ruby  libjson-ruby1.8 xmlstarlet thin curl socat libgnuplot-ruby libpgsql-ruby1.8 ruby libpdf-writer-ruby1.8 libjson-ruby1.8 libbluecloth-ruby irb

 Link to rails from within the fgdb.rb checkout:

 If you are using Debian squeeze:
 $> ln -sf /usr/share/rails-ruby1.8/ vendor/rails

 Or if you are using Debian wheezy:
 $> ln -sf /usr/lib/ruby/vendor_ruby/rails vendor/rails

 Install FG-specific package requirements:
 $> echo 'deb http://apt.freegeek.org/ freegeek public debian' > /etc/apt/sources.list.d/freegeek_fgdb.list
 $> sudo apt-get update
 $> sudo apt-get install freegeek-archive-keyring libbytes-ruby1.8

check if things are installed, and find out what you need to install:

 $> ./script/do_i_have_everything_installed_right

 Set up the database for use by at least yourself (needs admin privileges to manage databases):
 $> sudo su - postgres -c "createuser -a $USER"
 $> cp config/database.yml-example config/database.yml
   ::: edit config/database.yml to match database config

 If you would like to use a production database, first:
 $> export RAILS_ENV=production

 Create the basic database structure:
 $> rake db:create
 $> rake db:schema:load

Choose one of the following:

 Load skeletal metadata (for production databases):
 $> rake db:metadata:load
 $> ./script/make_admin

 OR: load full test data (for development databases, note that the 'admin' user login's password is 'secret'):
 $> ./script/load_devel_data

Migrate the database to the current schema:

 $> rake db:migrate

Start the server and browse in to see things working:

 $> ./script/server &
 $> iceweasel http://localhost:3000

To set up the apache2 passenger production web server (not needed for development):

 $> sudo apt-get install apache2 libapcache2-mod-passenger
 $> sudo a2enmod headers
 $> sudo a2enmod rewrite
 $> sudo chown -R www-data public log tmp
 $> sudo ln -s $(readlink -f doc/examples/apache2_sites-available_default) /etc/apache2/sites-enabled/
 $> sudo ln -s $(readlink -f doc/examples/fgdb) /etc/logrotate.d/

Start the server and browse in to see things working:

 $> sudo invoke-rc.d apache2 restart
 $> iceweasel http://localhost/

For setting up a production server running nginx and thin (instead of
apache), you can continue with the following setup procedure:
[NOTE: This is no longer used by PDX, at least]

 $> apt-get install nginx thin1.8
 $> ln -fs $(readlink -f doc/examples/web/fgdb.conf) /etc/nginx/sites-enabled/fgdb.conf
 $> ln -fs $(readlink -f doc/examples/web/fgdb.yml) /etc/thin/
 $> rm /etc/nginx/sites-enabled/default
 $> chown -R www-data:www-data tmp log public
 $> invoke-rc.d nginx restart
 $> invoke-rc.d thin restart
   ::: modify configs to taste :::
   ::: edit config/environment.rb to say "ENV['RAILS_ENV'] ||= 'production'" :::


== Customizing defaults for new Free Geek locations

The database table 'defaults' holds details which identify a Free Geek location.
These details are initially automatically loaded from the file: db/metadata/defaults.sql

== Upgrading to newest sprint

To upgrade a development checkout on the master branch:
 $> git pull
 $> rake db:migrate

To upgrade to the newest sprint release (every week or so):
 $> mv fgdb.rb/public/_release.html fgdb.rb/public/release.html
 $> invoke-rc.d apache2 stop
 $> cd fgdb.rb
 $> git checkout -b release_1.0.XX origin/release_1.0.XX
 $> RAILS_ENV=production rake db:migrate
 $> invoke-rc.d apache2 start
 $> mv public/release.html public/_release.html

== Developer / Committer setup

To set up your name and email within git:
 $> git config --global user.email email@domain.com
 $> git config --global user.name "John Doe"

To set up ssh key access to the production database:
 $> ssh-keygen -f ./script/update-devel-data/scp_key
 $> ./script/update-devel-data/under-myagent ssh-copy-id tulip
 $> ./script/update-devel-data/under-myagent ssh-copy-id devo
 $> git remote add fg dev.freegeek.org:/git/fgdb.rb
 $> git fetch fg
 $> sed -i "s/remote = origin/remote = fg/" .git/config

To update the mutated development data (on a dev server with ssh key
access to the production data):
 $> sudo apt-get install -y subversion
 $> ./script/update-devel-data/update-devel-data
 $> make -C db commit

== THANKS

in chronological order of svn commits:

* Martin Chase <mchase@freegeek.org>
* Jeff Schwaber
* Gordon Pederson
* Richard Seymour <rfs@freegeek.org>
* Tim Bauman
* Eric Davis
* Lantz Moore
* Ryan Niebur <ryan@freegeek.org>
